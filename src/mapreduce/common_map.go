package mapreduce

import (
	"encoding/json"
	"hash/fnv"
	"io/ioutil"
	"log"
	"os"
)

// doMap manages one map task: it reads one of the input files
// (inFile), calls the user-defined map function (mapF) for that file's
// contents, and partitions the output into nReduce intermediate files.
func doMap(
	jobName string, // the name of the MapReduce job
	mapTaskNumber int, // which map task this is
	inFile string,
	nReduce int, // the number of reduce task that will be run ("R" in the paper)
	mapF func(file string, contents string) []KeyValue,
) {
	//1. 读入数据
	contents, err := ioutil.ReadFile(inFile)
	if err != nil {
		log.Printf("read file %s failed.", inFile)
	}

	//2.使用mapF 生成 key/value pairs
	kvs := mapF(inFile, string(contents))

	//3.使用 reduceName 生成文件名，并创建文件，获取文件的句柄，json 化文件

	imm := make([]*os.File, nReduce)      //imm[]存放文件句柄
	enc := make([]*json.Encoder, nReduce) //enc 创建 json 输入器，将文件存储为 json 格式

	for i := 0; i < nReduce; i++ {
		//生成map tasks file
		if mapTaskFile, err := os.Create(reduceName(jobName, mapTaskNumber, i)); err != nil {
			log.Printf("create file %s failed.", reduceName(jobName, mapTaskNumber, i))
		} else {
			//fmt.Println("DEBUG::预测错误", reduceName(jobName, mapTaskNumber, i))
			imm[i] = mapTaskFile
			enc[i] = json.NewEncoder(mapTaskFile)
		}
		//fmt.Println("DEBUG::", reduceName(jobName, mapTaskNumber, i))
	}

	//4.使用上述生成的文件，存储inFile文件的内容，这里使用 ihash进行区分
	for _, kv := range kvs {
		r := ihash(kv.Key) % nReduce
		//fmt.Println("Map 生成的 kv 中的 key 为：", r)
		if enc[r] != nil {
			//将以 json 的格式写入到文件中
			if err := enc[r].Encode(&kv); err != nil {
				log.Printf("write %v to file %s failed", kv, reduceName(jobName, mapTaskNumber, r))
			}
		}
	}

	for i := 0; i < nReduce; i++ {
		if imm[i] != nil {
			imm[i].Close()
		}
	}
	//
	// You will need to write this function.
	//
	// The intermediate output of a map task is stored as multiple
	// files, one per destination reduce task. The file name includes
	// both the map task number and the reduce task number. Use the
	// filename generated by reduceName(jobName, mapTaskNumber, r) as
	// the intermediate file for reduce task r. Call ihash() (see below)
	// on each key, mod nReduce, to pick r for a key/value pair.
	//
	// mapF() is the map function provided by the application. The first
	// argument should be the input file name, though the map function
	// typically ignores it. The second argument should be the entire
	// input file contents. mapF() returns a slice containing the
	// key/value pairs for reduce; see common.go for the definition of
	// KeyValue.
	//
	// Look at Go's ioutil and os packages for functions to read
	// and write files.
	//
	// Coming up with a scheme for how to format the key/value pairs on
	// disk can be tricky, especially when taking into account that both
	// keys and values could contain newlines, quotes, and any other
	// character you can think of.
	//
	// One format often used for serializing data to a byte stream that the
	// other end can correctly reconstruct is JSON. You are not required to
	// use JSON, but as the output of the reduce tasks *must* be JSON,
	// familiarizing yourself with it here may prove useful. You can write
	// out a data structure as a JSON string to a file using the commented
	// code below. The corresponding decoding functions can be found in
	// common_reduce.go.
	//
	//   enc := json.NewEncoder(file)
	//   for _, kv := ... {
	//     err := enc.Encode(&kv)
	//
	// Remember to close the file after you have written all the values!
	//
}

func ihash(s string) int {
	h := fnv.New32a()
	h.Write([]byte(s))
	return int(h.Sum32() & 0x7fffffff)
}
